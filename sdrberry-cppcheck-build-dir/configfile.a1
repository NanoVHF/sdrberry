<?xml version="1.0"?>
<analyzerinfo checksum="2145648954">
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;File::fileIoSuccessful&apos; is not initialized in the constructor." verbose="Member variable &apos;File::fileIoSuccessful&apos; is not initialized in the constructor." cwe="398" file0="configfile.cpp">
            <location file="configfile.cpp" line="12" column="7"/>
            <symbol>File::fileIoSuccessful</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;File::fileIoSuccessful&apos; is not initialized in the constructor." verbose="Member variable &apos;File::fileIoSuccessful&apos; is not initialized in the constructor." cwe="398" file0="configfile.cpp">
            <location file="configfile.cpp" line="23" column="7"/>
            <symbol>File::fileIoSuccessful</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Option&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Option&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="configfile.cpp">
            <location file="configoption.h" line="23" column="9"/>
            <symbol>Option</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;File&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;File&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="configfile.cpp">
            <location file="configfile.h" line="43" column="9"/>
            <symbol>File</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;File&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;File&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="configfile.cpp">
            <location file="configfile.h" line="44" column="9"/>
            <symbol>File</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;value.find(&apos;,&apos;)!=-1&apos; is always true" verbose="Condition &apos;value.find(&apos;,&apos;)!=-1&apos; is always true" cwe="571" file0="configfile.cpp">
            <location file="configfile.cpp" line="298" column="41" info="Condition &apos;value.find(&apos;,&apos;)!=-1&apos; is always true"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;option&apos; shadows outer variable" verbose="Local variable &apos;option&apos; shadows outer variable" cwe="398" file0="configfile.cpp">
            <location file="configfile.cpp" line="295" column="23" info="Shadow variable"/>
            <location file="configfile.cpp" line="285" column="21" info="Shadowed declaration"/>
            <symbol>option</symbol>
        </error>
        <error id="stlIfStrFind" severity="performance" msg="Inefficient usage of string::find() in condition; string::starts_with() could be faster." verbose="Either inefficient or wrong usage of string::find(). string::starts_with() will be faster if string::find&apos;s result is compared with 0, because it will not scan the whole string. If your intention is to check that there are no findings in the string, you should compare with std::string::npos." cwe="597" file0="configfile.cpp">
            <location file="configfile.cpp" line="293" column="18"/>
        </error>
        <error id="stlIfStrFind" severity="performance" msg="Inefficient usage of string::find() in condition; string::starts_with() could be faster." verbose="Either inefficient or wrong usage of string::find(). string::starts_with() will be faster if string::find&apos;s result is compared with 0, because it will not scan the whole string. If your intention is to check that there are no findings in the string, you should compare with std::string::npos." cwe="597" file0="configfile.cpp">
            <location file="configfile.cpp" line="305" column="19"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="configfile.cpp">
            <location file="strlib.h" line="105" column="16"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="configfile.cpp">
            <location file="configfile.cpp" line="78" column="17"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;commentType&apos; is assigned a value that is never used." verbose="Variable &apos;commentType&apos; is assigned a value that is never used." cwe="563" file0="configfile.cpp">
            <location file="configfile.cpp" line="211" column="25"/>
            <symbol>commentType</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="configfile.h:107:17" call-funcname="stripComments" call-argnr="2" file="configfile.cpp" line="215" col="36" call-argexpr="multiLineComment" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="configfile.cpp" line="220" col="13" info="Assuming that condition '!multiLineComment' is not redundant"/>
  <path file="configfile.cpp" line="217" col="25" info="Assuming condition is false"/>
</function-call><function-call call-id="configfile.h:106:17" call-funcname="getCommentType" call-argnr="2" file="configfile.cpp" line="407" col="41" call-argexpr="checkEnd" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="configfile.cpp" line="220" col="13" info="Assuming that condition '!multiLineComment' is not redundant"/>
  <path file="configfile.cpp" line="217" col="25" info="Assuming condition is false"/>
  <path file="configfile.cpp" line="215" col="43" info="Calling function 'stripComments', 2nd argument 'multiLineComment' value is 0"/>
</function-call>  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="loadFromFile" lineNumber="42"/>
    <functiondecl functionName="loadFromString" lineNumber="54"/>
    <functiondecl functionName="writeToFile" lineNumber="60"/>
    <functiondecl functionName="writeToString" lineNumber="71"/>
    <functiondecl functionName="buildString" lineNumber="85"/>
    <functiondecl functionName="getStatus" lineNumber="97"/>
    <functiondecl functionName="setFlag" lineNumber="102"/>
    <functiondecl functionName="setFlags" lineNumber="110"/>
    <functiondecl functionName="optionExists" lineNumber="125"/>
    <functiondecl functionName="optionExists" lineNumber="131"/>
    <functiondecl functionName="setDefaultOptions" lineNumber="136"/>
    <functiondecl functionName="useSection" lineNumber="141"/>
    <functiondecl functionName="begin" lineNumber="146"/>
    <functiondecl functionName="end" lineNumber="151"/>
    <functiondecl functionName="getSection" lineNumber="156"/>
    <functiondecl functionName="getSection" lineNumber="161"/>
    <functiondecl functionName="sectionExists" lineNumber="166"/>
    <functiondecl functionName="sectionExists" lineNumber="171"/>
    <functiondecl functionName="eraseOption" lineNumber="176"/>
    <functiondecl functionName="eraseOption" lineNumber="185"/>
    <functiondecl functionName="eraseSection" lineNumber="190"/>
    <functiondecl functionName="eraseSection" lineNumber="195"/>
    <functiondecl functionName="clear" lineNumber="200"/>
    <functiondecl functionName="parseLines" lineNumber="205"/>
    <functiondecl functionName="isSection" lineNumber="233"/>
    <functiondecl functionName="parseSectionLine" lineNumber="238"/>
    <functiondecl functionName="parseOptionLine" lineNumber="244"/>
    <functiondecl functionName="setOption" lineNumber="330"/>
    <functiondecl functionName="getArrayOption" lineNumber="340"/>
    <functiondecl functionName="startArray" lineNumber="349"/>
    <functiondecl functionName="areQuotes" lineNumber="355"/>
    <functiondecl functionName="trimQuotes" lineNumber="361"/>
    <functiondecl functionName="isEndComment" lineNumber="374"/>
    <functiondecl functionName="getCommentType" lineNumber="379"/>
    <functiondecl functionName="stripComments" lineNumber="405"/>
    <functioncall functionName="DefaultFlags"/>
    <functioncall functionName="End"/>
    <functioncall functionName="File"/>
    <functioncall functionName="None"/>
    <functioncall functionName="Option"/>
    <functioncall functionName="Single"/>
    <functioncall functionName="Start"/>
    <functioncall functionName="Verbose"/>
    <functioncall functionName="areQuotes"/>
    <functioncall functionName="arrayOptionName"/>
    <functioncall functionName="assign"/>
    <functioncall functionName="back"/>
    <functioncall functionName="begin"/>
    <functioncall functionName="bline"/>
    <functioncall functionName="buildArrayString"/>
    <functioncall functionName="buildString"/>
    <functioncall functionName="checkEnd"/>
    <functioncall functionName="clear"/>
    <functioncall functionName="compare"/>
    <functioncall functionName="configFilename"/>
    <functioncall functionName="configStr"/>
    <functioncall functionName="const"/>
    <functioncall functionName="currentSection"/>
    <functioncall functionName="data"/>
    <functioncall functionName="decimal"/>
    <functioncall functionName="defaultOptions"/>
    <functioncall functionName="defaultValue"/>
    <functioncall functionName="delim"/>
    <functioncall functionName="elements"/>
    <functioncall functionName="empty"/>
    <functioncall functionName="end"/>
    <functioncall functionName="equalPos"/>
    <functioncall functionName="erase"/>
    <functioncall functionName="eraseOption"/>
    <functioncall functionName="eraseSection"/>
    <functioncall functionName="fail"/>
    <functioncall functionName="false"/>
    <functioncall functionName="fileIoSuccessful"/>
    <functioncall functionName="filename"/>
    <functioncall functionName="find"/>
    <functioncall functionName="for"/>
    <functioncall functionName="fromString"/>
    <functioncall functionName="front"/>
    <functioncall functionName="get"/>
    <functioncall functionName="getArrayOption"/>
    <functioncall functionName="getCommentType"/>
    <functioncall functionName="getLinesFromString"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="insert"/>
    <functioncall functionName="integer"/>
    <functioncall functionName="isEndComment"/>
    <functioncall functionName="isInRange"/>
    <functioncall functionName="isSection"/>
    <functioncall functionName="line"/>
    <functioncall functionName="lines"/>
    <functioncall functionName="loadFromFile"/>
    <functioncall functionName="maximum"/>
    <functioncall functionName="minimum"/>
    <functioncall functionName="multiLineComment"/>
    <functioncall functionName="n"/>
    <functioncall functionName="name"/>
    <functioncall functionName="newFlags"/>
    <functioncall functionName="operatorbool"/>
    <functioncall functionName="operatorconststd::string&amp;"/>
    <functioncall functionName="option"/>
    <functioncall functionName="optionExists"/>
    <functioncall functionName="options"/>
    <functioncall functionName="parseLines"/>
    <functioncall functionName="parseOptionLine"/>
    <functioncall functionName="parseSectionLine"/>
    <functioncall functionName="pop_back"/>
    <functioncall functionName="precision"/>
    <functioncall functionName="push"/>
    <functioncall functionName="push_back"/>
    <functioncall functionName="readLinesFromFile"/>
    <functioncall functionName="reserve"/>
    <functioncall functionName="return"/>
    <functioncall functionName="s"/>
    <functioncall functionName="second"/>
    <functioncall functionName="section"/>
    <functioncall functionName="sectionExists"/>
    <functioncall functionName="setDefaultOptions"/>
    <functioncall functionName="setFlags"/>
    <functioncall functionName="setMin"/>
    <functioncall functionName="setOption"/>
    <functioncall functionName="setQuotes"/>
    <functioncall functionName="setRange"/>
    <functioncall functionName="size"/>
    <functioncall functionName="split"/>
    <functioncall functionName="startArray"/>
    <functioncall functionName="state"/>
    <functioncall functionName="static_cast"/>
    <functioncall functionName="str"/>
    <functioncall functionName="stream"/>
    <functioncall functionName="stripComments"/>
    <functioncall functionName="strs"/>
    <functioncall functionName="substr"/>
    <functioncall functionName="to"/>
    <functioncall functionName="toString"/>
    <functioncall functionName="toStringWithQuotes"/>
    <functioncall functionName="trimQuotes"/>
    <functioncall functionName="trimWhitespace"/>
    <functioncall functionName="trimmedQuotes"/>
    <functioncall functionName="trimmedValue"/>
    <functioncall functionName="true"/>
    <functioncall functionName="val"/>
    <functioncall functionName="value"/>
    <functioncall functionName="while"/>
    <functioncall functionName="writeStringToFile"/>
    <functioncall functionName="writeToFile"/>
    <functioncall functionName="writeToString"/>
  </FileInfo>
</analyzerinfo>
